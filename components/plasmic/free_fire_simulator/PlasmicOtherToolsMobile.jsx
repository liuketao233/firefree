// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: HVb6eWdyYEJZ
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  useCurrentUser,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariants_2BvNreuf1Eto } from "./PlasmicGlobalVariant__DesktopBase"; // plasmic-import: 2BVNreuf1ETO/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicOtherToolsMobile.module.css"; // plasmic-import: HVb6eWdyYEJZ/css
import InformationButton2SvgIcon from "./icons/PlasmicIcon__InformationButton2Svg"; // plasmic-import: 65cHQAE_Nv_9/icon
import Group15Icon from "./icons/PlasmicIcon__Group15"; // plasmic-import: ts6mMTNCD9pR/icon

createPlasmicElementProxy;

export const PlasmicOtherToolsMobile__VariantProps = new Array();

export const PlasmicOtherToolsMobile__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicOtherToolsMobile__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    desktopBase: useScreenVariants_2BvNreuf1Eto()
  });
  return (
    <div
      data-plasmic-name={"others"}
      data-plasmic-override={overrides.others}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.others
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__yzeQg)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__oqLh0)}
        >
          <div
            data-plasmic-name={"gameInfo"}
            data-plasmic-override={overrides.gameInfo}
            className={classNames(projectcss.all, sty.gameInfo)}
          >
            <InformationButton2SvgIcon
              className={classNames(projectcss.all, sty.svg__dA1Il)}
              role={"img"}
            />
          </div>
          <div
            data-plasmic-name={"settings"}
            data-plasmic-override={overrides.settings}
            className={classNames(projectcss.all, sty.settings)}
          >
            <Group15Icon
              className={classNames(projectcss.all, sty.svg__aeqIu)}
              role={"img"}
            />
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__b93AS)}
        >
          <div
            data-plasmic-name={"rtp"}
            data-plasmic-override={overrides.rtp}
            className={classNames(projectcss.all, sty.rtp)}
          >
            <div
              data-plasmic-name={"rtp2"}
              data-plasmic-override={overrides.rtp2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.rtp2
              )}
            >
              <Trans__>
                {hasVariant(globalVariants, "desktopBase", "desktopOnly") ? (
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#F9F8F8" }}
                    >
                      {"Rtp"}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"  "}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#FBB900" }}
                    >
                      {"98.04%"}
                    </span>
                  </React.Fragment>
                ) : (
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#F9F8F8" }}
                    >
                      {"Rtp"}
                    </span>
                    <React.Fragment>{""}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"  98.04%"}
                    </span>
                  </React.Fragment>
                )}
              </Trans__>
            </div>
          </div>
          <div
            data-plasmic-name={"questions"}
            data-plasmic-override={overrides.questions}
            className={classNames(projectcss.all, sty.questions)}
          >
            <div
              data-plasmic-name={"group"}
              data-plasmic-override={overrides.group}
              className={classNames(projectcss.all, sty.group)}
            >
              <div
                data-plasmic-name={"layer3"}
                data-plasmic-override={overrides.layer3}
                className={classNames(projectcss.all, sty.layer3)}
              >
                <div
                  data-plasmic-name={"layer1"}
                  data-plasmic-override={overrides.layer1}
                  className={classNames(projectcss.all, sty.layer1)}
                >
                  <PlasmicImg__
                    data-plasmic-name={"img"}
                    data-plasmic-override={overrides.img}
                    alt={""}
                    className={classNames(sty.img)}
                    displayHeight={
                      hasVariant(globalVariants, "desktopBase", "desktopOnly")
                        ? "24px"
                        : "18px"
                    }
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={
                      hasVariant(globalVariants, "desktopBase", "desktopOnly")
                        ? "24px"
                        : "18px"
                    }
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/free_fire_simulator/images/questionMark.svg",
                      fullWidth: 18,
                      fullHeight: 18,
                      aspectRatio: 1
                    }}
                  />
                </div>
              </div>
            </div>
          </div>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  others: [
    "others",
    "gameInfo",
    "settings",
    "rtp",
    "rtp2",
    "questions",
    "group",
    "layer3",
    "layer1",
    "img"
  ],

  gameInfo: ["gameInfo"],
  settings: ["settings"],
  rtp: ["rtp", "rtp2"],
  rtp2: ["rtp2"],
  questions: ["questions", "group", "layer3", "layer1", "img"],
  group: ["group", "layer3", "layer1", "img"],
  layer3: ["layer3", "layer1", "img"],
  layer1: ["layer1", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicOtherToolsMobile__ArgProps,
          internalVariantPropNames: PlasmicOtherToolsMobile__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicOtherToolsMobile__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "others") {
    func.displayName = "PlasmicOtherToolsMobile";
  } else {
    func.displayName = `PlasmicOtherToolsMobile.${nodeName}`;
  }
  return func;
}

export const PlasmicOtherToolsMobile = Object.assign(
  // Top-level PlasmicOtherToolsMobile renders the root element
  makeNodeComponent("others"),
  {
    // Helper components rendering sub-elements
    gameInfo: makeNodeComponent("gameInfo"),
    settings: makeNodeComponent("settings"),
    rtp: makeNodeComponent("rtp"),
    rtp2: makeNodeComponent("rtp2"),
    questions: makeNodeComponent("questions"),
    group: makeNodeComponent("group"),
    layer3: makeNodeComponent("layer3"),
    layer1: makeNodeComponent("layer1"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicOtherToolsMobile
    internalVariantProps: PlasmicOtherToolsMobile__VariantProps,
    internalArgProps: PlasmicOtherToolsMobile__ArgProps
  }
);

export default PlasmicOtherToolsMobile;
/* prettier-ignore-end */
