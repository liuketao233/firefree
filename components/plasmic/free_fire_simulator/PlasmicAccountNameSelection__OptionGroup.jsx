// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: g6ZPCAHzd_nV
import * as React from "react";
import { useRouter } from "next/router";
import {
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import * as pp from "@plasmicapp/react-web";
import AccountNameSelection__Option from "../../AccountNameSelection__Option"; // plasmic-import: h_M3E9U_Kj7w/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicAccountNameSelection__OptionGroup.module.css"; // plasmic-import: g6ZPCAHzd_nV/css
import SUPER__PlasmicAccountNameSelection from "./PlasmicAccountNameSelection"; // plasmic-import: zxbY7F-iXxmn/render

createPlasmicElementProxy;

export const PlasmicAccountNameSelection__OptionGroup__VariantProps = new Array(
  "noTitle",
  "isFirst"
);

export const PlasmicAccountNameSelection__OptionGroup__ArgProps = new Array(
  "children",
  "title"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAccountNameSelection__OptionGroup__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "noTitle",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.noTitle
      },
      {
        path: "isFirst",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isFirst
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const superContexts = {
    AccountNameSelection: React.useContext(
      SUPER__PlasmicAccountNameSelection.Context
    )
  };
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootnoTitle]: hasVariant($state, "noTitle", "noTitle") }
      )}
    >
      {(hasVariant($state, "isFirst", "isFirst") ? false : true) ? (
        <div
          data-plasmic-name={"separator"}
          data-plasmic-override={overrides.separator}
          className={classNames(projectcss.all, sty.separator, {
            [sty.separatorisFirst]: hasVariant($state, "isFirst", "isFirst"),
            [sty.separatornoTitle]: hasVariant($state, "noTitle", "noTitle")
          })}
        />
      ) : null}
      {(hasVariant($state, "noTitle", "noTitle") ? false : true) ? (
        <div
          data-plasmic-name={"titleContainer"}
          data-plasmic-override={overrides.titleContainer}
          className={classNames(projectcss.all, sty.titleContainer, {
            [sty.titleContainerisFirst]: hasVariant(
              $state,
              "isFirst",
              "isFirst"
            ),
            [sty.titleContainernoTitle]: hasVariant(
              $state,
              "noTitle",
              "noTitle"
            )
          })}
        >
          {renderPlasmicSlot({
            defaultContents: <Trans__>{"Group Name"}</Trans__>,
            value: args.title,
            className: classNames(sty.slotTargetTitle)
          })}
        </div>
      ) : null}
      <div
        data-plasmic-name={"optionsContainer"}
        data-plasmic-override={overrides.optionsContainer}
        className={classNames(projectcss.all, sty.optionsContainer)}
      >
        {renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <AccountNameSelection__Option
                className={classNames("__wab_instance", sty.option__ooA1E)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yyzr
                  )}
                >
                  <Trans__>{"Option"}</Trans__>
                </div>
              </AccountNameSelection__Option>
              <AccountNameSelection__Option
                className={classNames("__wab_instance", sty.option__lKVhR)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jUgJy
                  )}
                >
                  <Trans__>{"Option"}</Trans__>
                </div>
              </AccountNameSelection__Option>
            </React.Fragment>
          ),

          value: args.children
        })}
      </div>
    </div>
  );
}

function useBehavior(props) {
  return pp.useSelectOptionGroup(
    PlasmicAccountNameSelection__OptionGroup,
    props,
    {
      noTitleVariant: { group: "noTitle", variant: "noTitle" },
      isFirstVariant: { group: "isFirst", variant: "isFirst" },
      optionsSlot: "children",
      titleSlot: "title",
      root: "root",
      separator: "separator",
      titleContainer: "titleContainer",
      optionsContainer: "optionsContainer"
    }
  );
}

const PlasmicDescendants = {
  root: ["root", "separator", "titleContainer", "optionsContainer"],
  separator: ["separator"],
  titleContainer: ["titleContainer"],
  optionsContainer: ["optionsContainer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicAccountNameSelection__OptionGroup__ArgProps,
          internalVariantPropNames:
            PlasmicAccountNameSelection__OptionGroup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAccountNameSelection__OptionGroup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccountNameSelection__OptionGroup";
  } else {
    func.displayName = `PlasmicAccountNameSelection__OptionGroup.${nodeName}`;
  }
  return func;
}

export const PlasmicAccountNameSelection__OptionGroup = Object.assign(
  // Top-level PlasmicAccountNameSelection__OptionGroup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    separator: makeNodeComponent("separator"),
    titleContainer: makeNodeComponent("titleContainer"),
    optionsContainer: makeNodeComponent("optionsContainer"),
    // Metadata about props expected for PlasmicAccountNameSelection__OptionGroup
    internalVariantProps:
      PlasmicAccountNameSelection__OptionGroup__VariantProps,
    internalArgProps: PlasmicAccountNameSelection__OptionGroup__ArgProps,
    useBehavior
  }
);

export default PlasmicAccountNameSelection__OptionGroup;
/* prettier-ignore-end */
