// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: jMxwgCFw66LF
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicDiamondOptions.module.css"; // plasmic-import: jMxwgCFw66LF/css
import Group21Icon from "./icons/PlasmicIcon__Group21"; // plasmic-import: cLINhy8dVcPL/icon
import Group22Icon from "./icons/PlasmicIcon__Group22"; // plasmic-import: KQx-Z_owk-gM/icon

createPlasmicElementProxy;

export const PlasmicDiamondOptions__VariantProps = new Array(
  "usdtAmount",
  "chosen"
);

export const PlasmicDiamondOptions__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicDiamondOptions__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "usdtAmount",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.usdtAmount
      },
      {
        path: "chosen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.chosen
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootchosen]: hasVariant($state, "chosen", "chosen"),
          [sty.rootchosen_usdtAmount__100000]:
            hasVariant($state, "usdtAmount", "_100000") &&
            hasVariant($state, "chosen", "chosen"),
          [sty.rootchosen_usdtAmount__10000]:
            hasVariant($state, "usdtAmount", "_10000") &&
            hasVariant($state, "chosen", "chosen"),
          [sty.rootchosen_usdtAmount__1000]:
            hasVariant($state, "usdtAmount", "_1000") &&
            hasVariant($state, "chosen", "chosen"),
          [sty.rootchosen_usdtAmount__200000]:
            hasVariant($state, "usdtAmount", "_200000") &&
            hasVariant($state, "chosen", "chosen"),
          [sty.rootchosen_usdtAmount__20000]:
            hasVariant($state, "usdtAmount", "_20000") &&
            hasVariant($state, "chosen", "chosen"),
          [sty.rootchosen_usdtAmount__2000]:
            hasVariant($state, "usdtAmount", "_2000") &&
            hasVariant($state, "chosen", "chosen"),
          [sty.rootchosen_usdtAmount__500000]:
            hasVariant($state, "usdtAmount", "_500000") &&
            hasVariant($state, "chosen", "chosen"),
          [sty.rootusdtAmount__1000000]: hasVariant(
            $state,
            "usdtAmount",
            "_1000000"
          ),
          [sty.rootusdtAmount__100000]: hasVariant(
            $state,
            "usdtAmount",
            "_100000"
          ),
          [sty.rootusdtAmount__10000]: hasVariant(
            $state,
            "usdtAmount",
            "_10000"
          ),
          [sty.rootusdtAmount__1000]: hasVariant($state, "usdtAmount", "_1000"),
          [sty.rootusdtAmount__2000000]: hasVariant(
            $state,
            "usdtAmount",
            "_2000000"
          ),
          [sty.rootusdtAmount__200000]: hasVariant(
            $state,
            "usdtAmount",
            "_200000"
          ),
          [sty.rootusdtAmount__20000]: hasVariant(
            $state,
            "usdtAmount",
            "_20000"
          ),
          [sty.rootusdtAmount__2000]: hasVariant($state, "usdtAmount", "_2000"),
          [sty.rootusdtAmount__500000]: hasVariant(
            $state,
            "usdtAmount",
            "_500000"
          ),
          [sty.rootusdtAmount__50000]: hasVariant(
            $state,
            "usdtAmount",
            "_50000"
          ),
          [sty.rootusdtAmount__50000_chosen]:
            hasVariant($state, "usdtAmount", "_50000") &&
            hasVariant($state, "chosen", "chosen"),
          [sty.rootusdtAmount__5000]: hasVariant($state, "usdtAmount", "_5000"),
          [sty.rootusdtAmount__5000_chosen]:
            hasVariant($state, "usdtAmount", "_5000") &&
            hasVariant($state, "chosen", "chosen")
        }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"diamondAmount"}
        data-plasmic-override={overrides.diamondAmount}
        hasGap={true}
        className={classNames(projectcss.all, sty.diamondAmount, {
          [sty.diamondAmountchosen]: hasVariant($state, "chosen", "chosen"),
          [sty.diamondAmountusdtAmount__1000]: hasVariant(
            $state,
            "usdtAmount",
            "_1000"
          ),
          [sty.diamondAmountusdtAmount__50000]: hasVariant(
            $state,
            "usdtAmount",
            "_50000"
          )
        })}
      >
        <div
          data-plasmic-name={"group"}
          data-plasmic-override={overrides.group}
          className={classNames(projectcss.all, sty.group, {
            [sty.groupusdtAmount__1000]: hasVariant(
              $state,
              "usdtAmount",
              "_1000"
            )
          })}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img, {
              [sty.imgchosen_usdtAmount__1000]:
                hasVariant($state, "usdtAmount", "_1000") &&
                hasVariant($state, "chosen", "chosen"),
              [sty.imgusdtAmount__1000]: hasVariant(
                $state,
                "usdtAmount",
                "_1000"
              )
            })}
            displayHeight={"10.707px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"11.999px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/free_fire_simulator/images/group20.svg",
              fullWidth: 11.999,
              fullHeight: 10.707,
              aspectRatio: 1.090909
            }}
          />

          <Group21Icon
            className={classNames(projectcss.all, sty.svg__kwKgJ)}
            role={"img"}
          />

          <Group21Icon
            className={classNames(projectcss.all, sty.svg__ol32M)}
            role={"img"}
          />

          <Group22Icon
            className={classNames(projectcss.all, sty.svg__rm037)}
            role={"img"}
          />
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__ckDgF,
            {
              [sty.textchosen__ckDgFpvCu]: hasVariant(
                $state,
                "chosen",
                "chosen"
              ),
              [sty.textchosen_usdtAmount__1000__ckDgFpvCuSWpQb]:
                hasVariant($state, "usdtAmount", "_1000") &&
                hasVariant($state, "chosen", "chosen"),
              [sty.textchosen_usdtAmount__2000__ckDgFpvCuQlEmn]:
                hasVariant($state, "usdtAmount", "_2000") &&
                hasVariant($state, "chosen", "chosen"),
              [sty.textusdtAmount__1000000__ckDgFOuAs1]: hasVariant(
                $state,
                "usdtAmount",
                "_1000000"
              ),
              [sty.textusdtAmount__100000__ckDgFWtkOj]: hasVariant(
                $state,
                "usdtAmount",
                "_100000"
              ),
              [sty.textusdtAmount__10000__ckDgFfqLJn]: hasVariant(
                $state,
                "usdtAmount",
                "_10000"
              ),
              [sty.textusdtAmount__1000__ckDgFsWpQb]: hasVariant(
                $state,
                "usdtAmount",
                "_1000"
              ),
              [sty.textusdtAmount__2000000__ckDgFx7XUp]: hasVariant(
                $state,
                "usdtAmount",
                "_2000000"
              ),
              [sty.textusdtAmount__200000__ckDgFoCvXk]: hasVariant(
                $state,
                "usdtAmount",
                "_200000"
              ),
              [sty.textusdtAmount__20000__ckDgFg1CsP]: hasVariant(
                $state,
                "usdtAmount",
                "_20000"
              ),
              [sty.textusdtAmount__2000__ckDgFqlEmn]: hasVariant(
                $state,
                "usdtAmount",
                "_2000"
              ),
              [sty.textusdtAmount__500000__ckDgF85SV]: hasVariant(
                $state,
                "usdtAmount",
                "_500000"
              ),
              [sty.textusdtAmount__50000__ckDgF78ChL]: hasVariant(
                $state,
                "usdtAmount",
                "_50000"
              ),
              [sty.textusdtAmount__5000__ckDgFNd71]: hasVariant(
                $state,
                "usdtAmount",
                "_5000"
              )
            }
          )}
        >
          <Trans__>
            {hasVariant($state, "usdtAmount", "_1000") &&
            hasVariant($state, "chosen", "chosen")
              ? "1,000"
              : hasVariant($state, "usdtAmount", "_2000000")
              ? "2,000,000"
              : hasVariant($state, "usdtAmount", "_1000000")
              ? "1,000,000"
              : hasVariant($state, "usdtAmount", "_500000")
              ? "500,000"
              : hasVariant($state, "usdtAmount", "_200000")
              ? "200,000"
              : hasVariant($state, "usdtAmount", "_100000")
              ? "100,000"
              : hasVariant($state, "usdtAmount", "_50000")
              ? "50,000"
              : hasVariant($state, "usdtAmount", "_20000")
              ? "20,000"
              : hasVariant($state, "usdtAmount", "_10000")
              ? "10,000"
              : hasVariant($state, "usdtAmount", "_5000")
              ? "5,000"
              : hasVariant($state, "usdtAmount", "_2000")
              ? "2,000"
              : hasVariant($state, "usdtAmount", "_1000")
              ? "1,000"
              : "1,000,000"}
          </Trans__>
        </div>
      </Stack__>
      <div
        data-plasmic-name={"diamondCase"}
        data-plasmic-override={overrides.diamondCase}
        className={classNames(projectcss.all, sty.diamondCase, {
          [sty.diamondCasechosen]: hasVariant($state, "chosen", "chosen"),
          [sty.diamondCaseusdtAmount__1000]: hasVariant(
            $state,
            "usdtAmount",
            "_1000"
          )
        })}
      />

      <div
        data-plasmic-name={"currencyAmount"}
        data-plasmic-override={overrides.currencyAmount}
        className={classNames(projectcss.all, sty.currencyAmount, {
          [sty.currencyAmountchosen]: hasVariant($state, "chosen", "chosen"),
          [sty.currencyAmountusdtAmount__1000]: hasVariant(
            $state,
            "usdtAmount",
            "_1000"
          )
        })}
      >
        <div
          data-plasmic-name={"background"}
          data-plasmic-override={overrides.background}
          className={classNames(projectcss.all, sty.background, {
            [sty.backgroundusdtAmount__1000]: hasVariant(
              $state,
              "usdtAmount",
              "_1000"
            )
          })}
        >
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox, {
              [sty.freeBoxusdtAmount__1000]: hasVariant(
                $state,
                "usdtAmount",
                "_1000"
              )
            })}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ecysn,
                {
                  [sty.textchosen_usdtAmount__1000__ecysnPvCuSWpQb]:
                    hasVariant($state, "usdtAmount", "_1000") &&
                    hasVariant($state, "chosen", "chosen"),
                  [sty.textusdtAmount__1000000__ecysnOuAs1]: hasVariant(
                    $state,
                    "usdtAmount",
                    "_1000000"
                  ),
                  [sty.textusdtAmount__100000__ecysnWtkOj]: hasVariant(
                    $state,
                    "usdtAmount",
                    "_100000"
                  ),
                  [sty.textusdtAmount__10000__ecysnfqLJn]: hasVariant(
                    $state,
                    "usdtAmount",
                    "_10000"
                  ),
                  [sty.textusdtAmount__1000__ecysnsWpQb]: hasVariant(
                    $state,
                    "usdtAmount",
                    "_1000"
                  ),
                  [sty.textusdtAmount__2000000__ecysnx7XUp]: hasVariant(
                    $state,
                    "usdtAmount",
                    "_2000000"
                  ),
                  [sty.textusdtAmount__200000__ecysnoCvXk]: hasVariant(
                    $state,
                    "usdtAmount",
                    "_200000"
                  ),
                  [sty.textusdtAmount__20000__ecysng1CsP]: hasVariant(
                    $state,
                    "usdtAmount",
                    "_20000"
                  ),
                  [sty.textusdtAmount__2000__ecysnQlEmn]: hasVariant(
                    $state,
                    "usdtAmount",
                    "_2000"
                  ),
                  [sty.textusdtAmount__500000__ecysn85SV]: hasVariant(
                    $state,
                    "usdtAmount",
                    "_500000"
                  ),
                  [sty.textusdtAmount__50000__ecysn78ChL]: hasVariant(
                    $state,
                    "usdtAmount",
                    "_50000"
                  ),
                  [sty.textusdtAmount__5000__ecysnNd71]: hasVariant(
                    $state,
                    "usdtAmount",
                    "_5000"
                  )
                }
              )}
            >
              <Trans__>
                {hasVariant($state, "usdtAmount", "_1000") &&
                hasVariant($state, "chosen", "chosen")
                  ? "USDT 1.00"
                  : hasVariant($state, "usdtAmount", "_2000000")
                  ? "USDT 2000.00"
                  : hasVariant($state, "usdtAmount", "_1000000")
                  ? "USDT 1000.00"
                  : hasVariant($state, "usdtAmount", "_500000")
                  ? "USDT 500.00"
                  : hasVariant($state, "usdtAmount", "_200000")
                  ? "USDT 200.00"
                  : hasVariant($state, "usdtAmount", "_100000")
                  ? "USDT 100.00"
                  : hasVariant($state, "usdtAmount", "_50000")
                  ? "USDT 50.00"
                  : hasVariant($state, "usdtAmount", "_20000")
                  ? "USDT 20.00"
                  : hasVariant($state, "usdtAmount", "_10000")
                  ? "USDT 10.00"
                  : hasVariant($state, "usdtAmount", "_5000")
                  ? "USDT 5.00"
                  : hasVariant($state, "usdtAmount", "_2000")
                  ? "USDT 2.00"
                  : hasVariant($state, "usdtAmount", "_1000")
                  ? "USDT 1.00"
                  : "USDT 1000.00"}
              </Trans__>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "diamondAmount",
    "group",
    "img",
    "diamondCase",
    "currencyAmount",
    "background",
    "freeBox"
  ],

  diamondAmount: ["diamondAmount", "group", "img"],
  group: ["group", "img"],
  img: ["img"],
  diamondCase: ["diamondCase"],
  currencyAmount: ["currencyAmount", "background", "freeBox"],
  background: ["background", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDiamondOptions__ArgProps,
          internalVariantPropNames: PlasmicDiamondOptions__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDiamondOptions__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDiamondOptions";
  } else {
    func.displayName = `PlasmicDiamondOptions.${nodeName}`;
  }
  return func;
}

export const PlasmicDiamondOptions = Object.assign(
  // Top-level PlasmicDiamondOptions renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    diamondAmount: makeNodeComponent("diamondAmount"),
    group: makeNodeComponent("group"),
    img: makeNodeComponent("img"),
    diamondCase: makeNodeComponent("diamondCase"),
    currencyAmount: makeNodeComponent("currencyAmount"),
    background: makeNodeComponent("background"),
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicDiamondOptions
    internalVariantProps: PlasmicDiamondOptions__VariantProps,
    internalArgProps: PlasmicDiamondOptions__ArgProps
  }
);

export default PlasmicDiamondOptions;
/* prettier-ignore-end */
