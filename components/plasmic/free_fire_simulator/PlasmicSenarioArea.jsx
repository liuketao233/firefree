// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: Wu71ATmn97cF
import * as React from "react";
import { useRouter } from "next/router";
import {
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicSenarioArea.module.css"; // plasmic-import: Wu71ATmn97cF/css

createPlasmicElementProxy;

export const PlasmicSenarioArea__VariantProps = new Array();

export const PlasmicSenarioArea__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSenarioArea__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"senarioArea"}
      data-plasmic-override={overrides.senarioArea}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.senarioArea
      )}
    >
      <div
        data-plasmic-name={"winRate"}
        data-plasmic-override={overrides.winRate}
        className={classNames(projectcss.all, sty.winRate)}
      >
        <div
          data-plasmic-name={"rectangle4156"}
          data-plasmic-override={overrides.rectangle4156}
          className={classNames(projectcss.all, sty.rectangle4156)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__co2FA
            )}
          >
            <Trans__>{"Payout"}</Trans__>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__t1WrP
            )}
          >
            <Trans__>{"\u00d7 1.9804"}</Trans__>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__jMcxs
            )}
          >
            <Trans__>{"\u80dc\u7387"}</Trans__>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__vmSp
            )}
          >
            <Trans__>{"50%"}</Trans__>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"scenarioPic"}
        data-plasmic-override={overrides.scenarioPic}
        className={classNames(projectcss.all, sty.scenarioPic)}
      />
    </div>
  );
}

const PlasmicDescendants = {
  senarioArea: ["senarioArea", "winRate", "rectangle4156", "scenarioPic"],
  winRate: ["winRate", "rectangle4156"],
  rectangle4156: ["rectangle4156"],
  scenarioPic: ["scenarioPic"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSenarioArea__ArgProps,
          internalVariantPropNames: PlasmicSenarioArea__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSenarioArea__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "senarioArea") {
    func.displayName = "PlasmicSenarioArea";
  } else {
    func.displayName = `PlasmicSenarioArea.${nodeName}`;
  }
  return func;
}

export const PlasmicSenarioArea = Object.assign(
  // Top-level PlasmicSenarioArea renders the root element
  makeNodeComponent("senarioArea"),
  {
    // Helper components rendering sub-elements
    winRate: makeNodeComponent("winRate"),
    rectangle4156: makeNodeComponent("rectangle4156"),
    scenarioPic: makeNodeComponent("scenarioPic"),
    // Metadata about props expected for PlasmicSenarioArea
    internalVariantProps: PlasmicSenarioArea__VariantProps,
    internalArgProps: PlasmicSenarioArea__ArgProps
  }
);

export default PlasmicSenarioArea;
/* prettier-ignore-end */
