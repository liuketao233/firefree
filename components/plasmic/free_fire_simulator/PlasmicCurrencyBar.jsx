// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: hl5_weK0MHHX
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import CurrencyOptions from "../../CurrencyOptions"; // plasmic-import: 8wdJ5eZC8N9O/component
import { useScreenVariants as useScreenVariants_2BvNreuf1Eto } from "./PlasmicGlobalVariant__DesktopBase"; // plasmic-import: 2BVNreuf1ETO/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicCurrencyBar.module.css"; // plasmic-import: hl5_weK0MHHX/css

createPlasmicElementProxy;

export const PlasmicCurrencyBar__VariantProps = new Array("bar");

export const PlasmicCurrencyBar__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCurrencyBar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "bar",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.bar
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    desktopBase: useScreenVariants_2BvNreuf1Eto()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootbar_bar1]: hasVariant($state, "bar", "bar1"),
          [sty.rootbar_bar2]: hasVariant($state, "bar", "bar2")
        }
      )}
    >
      <CurrencyOptions
        allCurrencies={
          hasVariant($state, "bar", "bar2") &&
          hasVariant(globalVariants, "desktopBase", "desktopOnly")
            ? ["ton"]
            : hasVariant($state, "bar", "bar2")
            ? ["bnb"]
            : undefined
        }
        className={classNames("__wab_instance", sty.currencyOptions___7OqCf, {
          [sty.currencyOptionsbar_bar1___7OqCfYoOi]: hasVariant(
            $state,
            "bar",
            "bar1"
          ),
          [sty.currencyOptionsbar_bar2___7OqCFp4DdO]: hasVariant(
            $state,
            "bar",
            "bar2"
          )
        })}
      />

      <CurrencyOptions
        allCurrencies={hasVariant($state, "bar", "bar2") ? ["trx"] : ["reals"]}
        chosen={hasVariant($state, "bar", "bar2") ? undefined : undefined}
        className={classNames("__wab_instance", sty.currencyOptions__du7M8, {
          [sty.currencyOptionsbar_bar2__du7M8P4DdO]: hasVariant(
            $state,
            "bar",
            "bar2"
          )
        })}
      />

      <div
        className={classNames(projectcss.all, sty.freeBox__jRneh, {
          [sty.freeBoxbar_bar2__jRnehp4DdO]: hasVariant($state, "bar", "bar2")
        })}
      />

      {(
        hasVariant($state, "bar", "bar2") &&
        hasVariant(globalVariants, "desktopBase", "desktopOnly")
          ? true
          : hasVariant($state, "bar", "bar2")
          ? true
          : false
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__gmEoO, {
            [sty.freeBoxbar_bar2__gmEoOp4DdO]: hasVariant($state, "bar", "bar2")
          })}
        />
      ) : null}
      {(
        hasVariant($state, "bar", "bar2") &&
        hasVariant(globalVariants, "desktopBase", "desktopOnly")
          ? true
          : hasVariant($state, "bar", "bar2")
          ? true
          : false
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__s5N2N, {
            [sty.freeBoxbar_bar2__s5N2Np4DdO]: hasVariant($state, "bar", "bar2")
          })}
        />
      ) : null}
      {(
        hasVariant($state, "bar", "bar2") &&
        hasVariant(globalVariants, "desktopBase", "desktopOnly")
          ? true
          : hasVariant($state, "bar", "bar2")
          ? true
          : false
      ) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__zvj6Q, {
            [sty.freeBoxbar_bar2__zvj6Qp4DdO]: hasVariant($state, "bar", "bar2")
          })}
        />
      ) : null}
      <CurrencyOptions
        allCurrencies={hasVariant($state, "bar", "bar2") ? ["ton"] : ["usdt"]}
        chosen={hasVariant($state, "bar", "bar2") ? undefined : true}
        className={classNames("__wab_instance", sty.currencyOptions__mp6O, {
          [sty.currencyOptionsbar_bar2__mp6Op4DdO]: hasVariant(
            $state,
            "bar",
            "bar2"
          )
        })}
      />

      <CurrencyOptions
        allCurrencies={
          hasVariant(globalVariants, "desktopBase", "desktopOnly")
            ? ["bnb"]
            : ["usdt"]
        }
        chosen={
          hasVariant(globalVariants, "desktopBase", "desktopOnly")
            ? undefined
            : true
        }
        className={classNames("__wab_instance", sty.currencyOptions___2MOqD, {
          [sty.currencyOptionsbar_bar1___2MOqDYoOi]: hasVariant(
            $state,
            "bar",
            "bar1"
          ),
          [sty.currencyOptionsbar_bar2___2MOqDp4DdO]: hasVariant(
            $state,
            "bar",
            "bar2"
          )
        })}
      />

      {(
        hasVariant($state, "bar", "bar2")
          ? true
          : hasVariant(globalVariants, "desktopBase", "desktopOnly")
          ? true
          : false
      ) ? (
        <CurrencyOptions
          allCurrencies={["trx"]}
          className={classNames("__wab_instance", sty.currencyOptions__zTu3L, {
            [sty.currencyOptionsbar_bar2__zTu3Lp4DdO]: hasVariant(
              $state,
              "bar",
              "bar2"
            )
          })}
        />
      ) : null}
      {(hasVariant($state, "bar", "bar2") ? true : false) ? (
        <CurrencyOptions
          allCurrencies={["bnb"]}
          className={classNames("__wab_instance", sty.currencyOptions__vG21L, {
            [sty.currencyOptionsbar_bar2__vG21Lp4DdO]: hasVariant(
              $state,
              "bar",
              "bar2"
            )
          })}
        />
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCurrencyBar__ArgProps,
          internalVariantPropNames: PlasmicCurrencyBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCurrencyBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCurrencyBar";
  } else {
    func.displayName = `PlasmicCurrencyBar.${nodeName}`;
  }
  return func;
}

export const PlasmicCurrencyBar = Object.assign(
  // Top-level PlasmicCurrencyBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicCurrencyBar
    internalVariantProps: PlasmicCurrencyBar__VariantProps,
    internalArgProps: PlasmicCurrencyBar__ArgProps
  }
);

export default PlasmicCurrencyBar;
/* prettier-ignore-end */
