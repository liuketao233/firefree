// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: ABnpG58oqYch
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  useCurrentUser,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Logo from "../../Logo"; // plasmic-import: vUtPh7iXuorR/component
import GameBalance from "../../GameBalance"; // plasmic-import: gwn5sYqUZdjz/component
import ProfileEntrance from "../../ProfileEntrance"; // plasmic-import: kD3fRv5nUYyl/component
import { useScreenVariants as useScreenVariants_2BvNreuf1Eto } from "./PlasmicGlobalVariant__DesktopBase"; // plasmic-import: 2BVNreuf1ETO/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicTopNavBar.module.css"; // plasmic-import: ABnpG58oqYch/css

createPlasmicElementProxy;

export const PlasmicTopNavBar__VariantProps = new Array();

export const PlasmicTopNavBar__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTopNavBar__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    desktopBase: useScreenVariants_2BvNreuf1Eto()
  });
  return (
    <div
      data-plasmic-name={"navBar"}
      data-plasmic-override={overrides.navBar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.navBar
      )}
    >
      <div
        data-plasmic-name={"navBackground"}
        data-plasmic-override={overrides.navBackground}
        className={classNames(projectcss.all, sty.navBackground)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__nKuIx)}
        >
          <Logo
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            className={classNames("__wab_instance", sty.logo)}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___5VL1H)}
          >
            <GameBalance
              overrides={overrides}
              data-plasmic-name={"gameBalance"}
              data-plasmic-override={overrides.gameBalance}
              className={classNames("__wab_instance", sty.gameBalance)}
            />

            <ProfileEntrance
              className={classNames(
                "__wab_instance",
                sty.profileEntrance__i9Qzs
              )}
            />

            <ProfileEntrance
              className={classNames(
                "__wab_instance",
                sty.profileEntrance__v29M
              )}
            />
          </Stack__>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  navBar: ["navBar", "navBackground", "logo", "gameBalance"],
  navBackground: ["navBackground", "logo", "gameBalance"],
  logo: ["logo"],
  gameBalance: ["gameBalance"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTopNavBar__ArgProps,
          internalVariantPropNames: PlasmicTopNavBar__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTopNavBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navBar") {
    func.displayName = "PlasmicTopNavBar";
  } else {
    func.displayName = `PlasmicTopNavBar.${nodeName}`;
  }
  return func;
}

export const PlasmicTopNavBar = Object.assign(
  // Top-level PlasmicTopNavBar renders the root element
  makeNodeComponent("navBar"),
  {
    // Helper components rendering sub-elements
    navBackground: makeNodeComponent("navBackground"),
    logo: makeNodeComponent("logo"),
    gameBalance: makeNodeComponent("gameBalance"),
    // Metadata about props expected for PlasmicTopNavBar
    internalVariantProps: PlasmicTopNavBar__VariantProps,
    internalArgProps: PlasmicTopNavBar__ArgProps
  }
);

export default PlasmicTopNavBar;
/* prettier-ignore-end */
