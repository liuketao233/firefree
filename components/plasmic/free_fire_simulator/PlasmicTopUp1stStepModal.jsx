// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: 3J-XRJL-oYU0
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  useCurrentUser,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import DiamondsSelection from "../../DiamondsSelection"; // plasmic-import: rNJR5WH_MPfP/component
import NextButton from "../../NextButton"; // plasmic-import: Av2xkV_SUoiq/component
import { useScreenVariants as useScreenVariants_2BvNreuf1Eto } from "./PlasmicGlobalVariant__DesktopBase"; // plasmic-import: 2BVNreuf1ETO/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicTopUp1stStepModal.module.css"; // plasmic-import: 3J-XRJL-oYU0/css
import BackButtonSvgIcon from "./icons/PlasmicIcon__BackButtonSvg"; // plasmic-import: 62NNR1D0AqJT/icon
import Layer22Icon from "./icons/PlasmicIcon__Layer22"; // plasmic-import: SIu0NpOppXl6/icon
import RightSvgIcon from "./icons/PlasmicIcon__RightSvg"; // plasmic-import: JTHnt52H6OfL/icon

createPlasmicElementProxy;

export const PlasmicTopUp1stStepModal__VariantProps = new Array();

export const PlasmicTopUp1stStepModal__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTopUp1stStepModal__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  // console.log(variants, overrides, forNode,"PlasmicTopUp1stStepModal__RenderFunc");
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    desktopBase: useScreenVariants_2BvNreuf1Eto()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"profileModal"}
      data-plasmic-override={overrides.profileModal}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.profileModal
      )}
    >
      <div
        data-plasmic-name={"profileHeader"}
        data-plasmic-override={overrides.profileHeader}
        className={classNames(projectcss.all, sty.profileHeader)}
      >
        <BackButtonSvgIcon
          data-plasmic-name={"closeModal2"}
          data-plasmic-override={overrides.closeModal2}
          className={classNames(projectcss.all, sty.closeModal2)}
          role={"img"}
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___5BJfa
          )}
        >
          <Trans__>{"\u8d2d\u4e70\u94bb\u77f3"}</Trans__>
        </div>
        <Layer22Icon
          data-plasmic-name={"closeModal"}
          data-plasmic-override={overrides.closeModal}
          className={classNames(projectcss.all, sty.closeModal)}
          role={"img"}
        />
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__fDez)}>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__dtluo)}
        >
          <DiamondsSelection
            data-plasmic-name={"diamondsSelection"}
            data-plasmic-override={overrides.diamondsSelection}
            className={classNames("__wab_instance", sty.diamondsSelection)}
          />

          <NextButton
            data-plasmic-name={"nextButton"}
            data-plasmic-override={overrides.nextButton}
            className={classNames("__wab_instance", sty.nextButton)}
            endIcon={
              <RightSvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            }
            showEndIcon={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__c0Sm4
              )}
            >
              <Trans__>
                {
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#000000" }}
                    >
                      {"Next (1/2)"}
                    </span>
                  </React.Fragment>
                }
              </Trans__>
            </div>
          </NextButton>
        </Stack__>
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  profileModal: [
    "profileModal",
    "profileHeader",
    "closeModal2",
    "closeModal",
    "diamondsSelection",
    "nextButton",
    "svg"
  ],

  profileHeader: ["profileHeader", "closeModal2", "closeModal"],
  closeModal2: ["closeModal2"],
  closeModal: ["closeModal"],
  diamondsSelection: ["diamondsSelection"],
  nextButton: ["nextButton", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTopUp1stStepModal__ArgProps,
          internalVariantPropNames: PlasmicTopUp1stStepModal__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTopUp1stStepModal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "profileModal") {
    func.displayName = "PlasmicTopUp1stStepModal";
  } else {
    func.displayName = `PlasmicTopUp1stStepModal.${nodeName}`;
  }
  return func;
}

export const PlasmicTopUp1stStepModal = Object.assign(
  // Top-level PlasmicTopUp1stStepModal renders the root element
  makeNodeComponent("profileModal"),
  {
    // Helper components rendering sub-elements
    profileHeader: makeNodeComponent("profileHeader"),
    closeModal2: makeNodeComponent("closeModal2"),
    closeModal: makeNodeComponent("closeModal"),
    diamondsSelection: makeNodeComponent("diamondsSelection"),
    nextButton: makeNodeComponent("nextButton"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicTopUp1stStepModal
    internalVariantProps: PlasmicTopUp1stStepModal__VariantProps,
    internalArgProps: PlasmicTopUp1stStepModal__ArgProps
  }
);

export default PlasmicTopUp1stStepModal;
/* prettier-ignore-end */
