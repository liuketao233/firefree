// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: 6Fzwolj6rkvl
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import RecentRecords from "../../RecentRecords"; // plasmic-import: e6HpMvhYjvtJ/component
import ModeToggle from "../../ModeToggle"; // plasmic-import: aGLypm5xeuJ7/component
import ScenarioDiv from "../../ScenarioDiv"; // plasmic-import: UYEtztOS2wJV/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicInfoArea.module.css"; // plasmic-import: 6Fzwolj6rkvl/css

createPlasmicElementProxy;

export const PlasmicInfoArea__VariantProps = new Array();

export const PlasmicInfoArea__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInfoArea__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  console.log(props,"PlasmicInfoArea__RenderFunc");
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"infoArea"}
      data-plasmic-override={overrides.infoArea}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.infoArea
      )}
    >
      <div
        data-plasmic-name={"headerArea"}
        data-plasmic-override={overrides.headerArea}
        className={classNames(projectcss.all, sty.headerArea)}
      >
        <RecentRecords
          data-plasmic-name={"recentRecords"}
          data-plasmic-override={overrides.recentRecords}
          className={classNames("__wab_instance", sty.recentRecords)}
        />

        <ModeToggle
          data-plasmic-name={"modeToggle"}
          data-plasmic-override={overrides.modeToggle}
          className={classNames("__wab_instance", sty.modeToggle)}
        />
      </div>
      <div
        data-plasmic-name={"mainArea"}
        data-plasmic-override={overrides.mainArea}
        className={classNames(projectcss.all, sty.mainArea)}
      >
        <ScenarioDiv
          data-plasmic-name={"scenarioDiv"}
          data-plasmic-override={overrides.scenarioDiv}
          className={classNames("__wab_instance", sty.scenarioDiv)}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  infoArea: [
    "infoArea",
    "headerArea",
    "recentRecords",
    "modeToggle",
    "mainArea",
    "scenarioDiv"
  ],

  headerArea: ["headerArea", "recentRecords", "modeToggle"],
  recentRecords: ["recentRecords"],
  modeToggle: ["modeToggle"],
  mainArea: ["mainArea", "scenarioDiv"],
  scenarioDiv: ["scenarioDiv"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInfoArea__ArgProps,
          internalVariantPropNames: PlasmicInfoArea__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInfoArea__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "infoArea") {
    func.displayName = "PlasmicInfoArea";
  } else {
    func.displayName = `PlasmicInfoArea.${nodeName}`;
  }
  return func;
}

export const PlasmicInfoArea = Object.assign(
  // Top-level PlasmicInfoArea renders the root element
  makeNodeComponent("infoArea"),
  {
    // Helper components rendering sub-elements
    headerArea: makeNodeComponent("headerArea"),
    recentRecords: makeNodeComponent("recentRecords"),
    modeToggle: makeNodeComponent("modeToggle"),
    mainArea: makeNodeComponent("mainArea"),
    scenarioDiv: makeNodeComponent("scenarioDiv"),
    // Metadata about props expected for PlasmicInfoArea
    internalVariantProps: PlasmicInfoArea__VariantProps,
    internalArgProps: PlasmicInfoArea__ArgProps
  }
);

export default PlasmicInfoArea;
/* prettier-ignore-end */
