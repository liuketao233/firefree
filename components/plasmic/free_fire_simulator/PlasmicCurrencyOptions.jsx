// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: 8wdJ5eZC8N9O
import * as React from "react";
import { useRouter } from "next/router";
import {
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicCurrencyOptions.module.css"; // plasmic-import: 8wdJ5eZC8N9O/css

createPlasmicElementProxy;

export const PlasmicCurrencyOptions__VariantProps = new Array(
  "allCurrencies",
  "chosen"
);

export const PlasmicCurrencyOptions__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCurrencyOptions__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "allCurrencies",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.allCurrencies
      },
      {
        path: "chosen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.chosen
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"currencySelection"}
      data-plasmic-override={overrides.currencySelection}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.currencySelection,
        {
          [sty.currencySelectionallCurrencies_bnb]: hasVariant(
            $state,
            "allCurrencies",
            "bnb"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"rectangle4246"}
        data-plasmic-override={overrides.rectangle4246}
        className={classNames(projectcss.all, sty.rectangle4246, {
          [sty.rectangle4246allCurrencies_bnb]: hasVariant(
            $state,
            "allCurrencies",
            "bnb"
          ),
          [sty.rectangle4246allCurrencies_idr]: hasVariant(
            $state,
            "allCurrencies",
            "idr"
          ),
          [sty.rectangle4246allCurrencies_reals]: hasVariant(
            $state,
            "allCurrencies",
            "reals"
          ),
          [sty.rectangle4246allCurrencies_trx]: hasVariant(
            $state,
            "allCurrencies",
            "trx"
          ),
          [sty.rectangle4246allCurrencies_usdt]: hasVariant(
            $state,
            "allCurrencies",
            "usdt"
          ),
          [sty.rectangle4246chosen]: hasVariant($state, "chosen", "chosen")
        })}
      >
        <div
          data-plasmic-name={"currency"}
          data-plasmic-override={overrides.currency}
          className={classNames(projectcss.all, sty.currency, {
            [sty.currencyallCurrencies_bnb]: hasVariant(
              $state,
              "allCurrencies",
              "bnb"
            ),
            [sty.currencyallCurrencies_idr]: hasVariant(
              $state,
              "allCurrencies",
              "idr"
            ),
            [sty.currencyallCurrencies_reals]: hasVariant(
              $state,
              "allCurrencies",
              "reals"
            ),
            [sty.currencyallCurrencies_ton]: hasVariant(
              $state,
              "allCurrencies",
              "ton"
            ),
            [sty.currencyallCurrencies_trx]: hasVariant(
              $state,
              "allCurrencies",
              "trx"
            ),
            [sty.currencyallCurrencies_usdt]: hasVariant(
              $state,
              "allCurrencies",
              "usdt"
            ),
            [sty.currencychosen]: hasVariant($state, "chosen", "chosen")
          })}
        />

        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text,
            {
              [sty.textallCurrencies_bnb]: hasVariant(
                $state,
                "allCurrencies",
                "bnb"
              ),
              [sty.textallCurrencies_idr]: hasVariant(
                $state,
                "allCurrencies",
                "idr"
              ),
              [sty.textallCurrencies_reals]: hasVariant(
                $state,
                "allCurrencies",
                "reals"
              ),
              [sty.textallCurrencies_ton]: hasVariant(
                $state,
                "allCurrencies",
                "ton"
              ),
              [sty.textallCurrencies_trx]: hasVariant(
                $state,
                "allCurrencies",
                "trx"
              ),
              [sty.textallCurrencies_usdt]: hasVariant(
                $state,
                "allCurrencies",
                "usdt"
              ),
              [sty.textchosen]: hasVariant($state, "chosen", "chosen")
            }
          )}
        >
          <Trans__>
            {hasVariant($state, "allCurrencies", "ton")
              ? "TON"
              : hasVariant($state, "allCurrencies", "trx")
              ? "TRX"
              : hasVariant($state, "allCurrencies", "bnb")
              ? "BNB"
              : hasVariant($state, "allCurrencies", "usdt")
              ? "USDT"
              : hasVariant($state, "allCurrencies", "reals")
              ? "\u96f7\u4e9a\u5c14"
              : "\u5370\u5c3c\u76fe"}
          </Trans__>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  currencySelection: ["currencySelection", "rectangle4246", "currency", "text"],
  rectangle4246: ["rectangle4246", "currency", "text"],
  currency: ["currency"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCurrencyOptions__ArgProps,
          internalVariantPropNames: PlasmicCurrencyOptions__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCurrencyOptions__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "currencySelection") {
    func.displayName = "PlasmicCurrencyOptions";
  } else {
    func.displayName = `PlasmicCurrencyOptions.${nodeName}`;
  }
  return func;
}

export const PlasmicCurrencyOptions = Object.assign(
  // Top-level PlasmicCurrencyOptions renders the root element
  makeNodeComponent("currencySelection"),
  {
    // Helper components rendering sub-elements
    rectangle4246: makeNodeComponent("rectangle4246"),
    currency: makeNodeComponent("currency"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicCurrencyOptions
    internalVariantProps: PlasmicCurrencyOptions__VariantProps,
    internalArgProps: PlasmicCurrencyOptions__ArgProps
  }
);

export default PlasmicCurrencyOptions;
/* prettier-ignore-end */
