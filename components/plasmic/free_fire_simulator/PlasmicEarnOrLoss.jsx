// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: 1KaTQ9DhQg_b
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicEarnOrLoss.module.css"; // plasmic-import: 1KaTQ9DhQg_b/css
import Group21Icon from "./icons/PlasmicIcon__Group21"; // plasmic-import: cLINhy8dVcPL/icon
import Group22Icon from "./icons/PlasmicIcon__Group22"; // plasmic-import: KQx-Z_owk-gM/icon

createPlasmicElementProxy;

export const PlasmicEarnOrLoss__VariantProps = new Array("status");

export const PlasmicEarnOrLoss__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEarnOrLoss__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "status",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.status
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"group44098"}
      data-plasmic-override={overrides.group44098}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.group44098,
        { [sty.group44098status_loss]: hasVariant($state, "status", "loss") }
      )}
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.textstatus_loss]: hasVariant($state, "status", "loss")
        })}
      >
        <Trans__>
          {hasVariant($state, "status", "loss") ? "-8,000" : "+12,000"}
        </Trans__>
      </div>
      <div
        data-plasmic-name={"group"}
        data-plasmic-override={overrides.group}
        className={classNames(projectcss.all, sty.group)}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"12px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"12px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/free_fire_simulator/images/group20.svg",
            fullWidth: 11.999,
            fullHeight: 10.707,
            aspectRatio: 1.090909
          }}
        />

        <Group21Icon
          className={classNames(projectcss.all, sty.svg__zYnlg)}
          role={"img"}
        />

        <Group21Icon
          className={classNames(projectcss.all, sty.svg__kQePr)}
          role={"img"}
        />

        <Group22Icon
          className={classNames(projectcss.all, sty.svg__qr4R)}
          role={"img"}
        />
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  group44098: ["group44098", "text", "group", "img"],
  text: ["text"],
  group: ["group", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEarnOrLoss__ArgProps,
          internalVariantPropNames: PlasmicEarnOrLoss__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEarnOrLoss__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "group44098") {
    func.displayName = "PlasmicEarnOrLoss";
  } else {
    func.displayName = `PlasmicEarnOrLoss.${nodeName}`;
  }
  return func;
}

export const PlasmicEarnOrLoss = Object.assign(
  // Top-level PlasmicEarnOrLoss renders the root element
  makeNodeComponent("group44098"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    group: makeNodeComponent("group"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicEarnOrLoss
    internalVariantProps: PlasmicEarnOrLoss__VariantProps,
    internalArgProps: PlasmicEarnOrLoss__ArgProps
  }
);

export default PlasmicEarnOrLoss;
/* prettier-ignore-end */
