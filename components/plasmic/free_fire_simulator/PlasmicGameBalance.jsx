// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: gwn5sYqUZdjz
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  useCurrentUser,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariants_2BvNreuf1Eto } from "./PlasmicGlobalVariant__DesktopBase"; // plasmic-import: 2BVNreuf1ETO/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicGameBalance.module.css"; // plasmic-import: gwn5sYqUZdjz/css
import Group2Icon from "./icons/PlasmicIcon__Group2"; // plasmic-import: z5D1roS2Zibo/icon
import Group3Icon from "./icons/PlasmicIcon__Group3"; // plasmic-import: lIO7Bsnfj8s3/icon
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: Lfhpy192AEL0/icon
import Group4Icon from "./icons/PlasmicIcon__Group4"; // plasmic-import: rCyM0dIUxCjU/icon

createPlasmicElementProxy;

export const PlasmicGameBalance__VariantProps = new Array();

export const PlasmicGameBalance__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGameBalance__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  console.log(overrides,"PlasmicGameBalance__RenderFunc")
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    desktopBase: useScreenVariants_2BvNreuf1Eto()
  });
  return (
    <div
      data-plasmic-name={"gameBalance"}
      data-plasmic-override={overrides.gameBalance}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.gameBalance
      )}
    >
      <div
        data-plasmic-name={"background"}
        data-plasmic-override={overrides.background}
        className={classNames(projectcss.all, sty.background)}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            data-plasmic-name={"diamonds3"}
            data-plasmic-override={overrides.diamonds3}
            className={classNames(projectcss.all, sty.diamonds3)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={
                hasVariant(globalVariants, "desktopBase", "desktopOnly")
                  ? "24px"
                  : "20px"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={
                hasVariant(globalVariants, "desktopBase", "desktopOnly")
                  ? "24px"
                  : "20px"
              }
              loading={"lazy"}
              src={{
                src: "/plasmic/free_fire_simulator/images/group.svg",
                fullWidth: 18,
                fullHeight: 16.061,
                aspectRatio: 1.058824
              }}
            />

            <Group2Icon
              className={classNames(projectcss.all, sty.svg__r4Vud)}
              role={"img"}
            />

            <Group2Icon
              className={classNames(projectcss.all, sty.svg__bcTw)}
              role={"img"}
            />

            <Group3Icon
              className={classNames(projectcss.all, sty.svg__zWpqA)}
              role={"img"}
            />
          </div>
          <div
            data-plasmic-name={"amount3"}
            data-plasmic-override={overrides.amount3}
            className={classNames(projectcss.all, sty.amount3)}
          >
            <div
              data-plasmic-name={"amount4"}
              data-plasmic-override={overrides.amount4}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.amount4
              )}
            >
              <Trans__>{overrides.balance}</Trans__>
            </div>
          </div>
          <div
            data-plasmic-name={"topUp"}
            data-plasmic-override={overrides.topUp}
            className={classNames(projectcss.all, sty.topUp)}
          >
            <div
              data-plasmic-name={"layer2"}
              data-plasmic-override={overrides.layer2}
              className={classNames(projectcss.all, sty.layer2)}
            >
              <VectorIcon
                className={classNames(projectcss.all, sty.svg___6Pa1C)}
                role={"img"}
              />

              <Group4Icon
                className={classNames(projectcss.all, sty.svg__bE3Cq)}
                role={"img"}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  gameBalance: [
    "gameBalance",
    "background",
    "freeBox",
    "diamonds3",
    "img",
    "amount3",
    "amount4",
    "topUp",
    "layer2"
  ],

  background: [
    "background",
    "freeBox",
    "diamonds3",
    "img",
    "amount3",
    "amount4",
    "topUp",
    "layer2"
  ],

  freeBox: [
    "freeBox",
    "diamonds3",
    "img",
    "amount3",
    "amount4",
    "topUp",
    "layer2"
  ],

  diamonds3: ["diamonds3", "img"],
  img: ["img"],
  amount3: ["amount3", "amount4"],
  amount4: ["amount4"],
  topUp: ["topUp", "layer2"],
  layer2: ["layer2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGameBalance__ArgProps,
          internalVariantPropNames: PlasmicGameBalance__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGameBalance__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "gameBalance") {
    func.displayName = "PlasmicGameBalance";
  } else {
    func.displayName = `PlasmicGameBalance.${nodeName}`;
  }
  return func;
}

export const PlasmicGameBalance = Object.assign(
  // Top-level PlasmicGameBalance renders the root element
  makeNodeComponent("gameBalance"),
  {
    // Helper components rendering sub-elements
    background: makeNodeComponent("background"),
    freeBox: makeNodeComponent("freeBox"),
    diamonds3: makeNodeComponent("diamonds3"),
    img: makeNodeComponent("img"),
    amount3: makeNodeComponent("amount3"),
    amount4: makeNodeComponent("amount4"),
    topUp: makeNodeComponent("topUp"),
    layer2: makeNodeComponent("layer2"),
    // Metadata about props expected for PlasmicGameBalance
    internalVariantProps: PlasmicGameBalance__VariantProps,
    internalArgProps: PlasmicGameBalance__ArgProps
  }
);

export default PlasmicGameBalance;
/* prettier-ignore-end */
