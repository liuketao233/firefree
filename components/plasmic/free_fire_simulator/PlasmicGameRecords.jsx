// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: 2k4vr1-zQhkM
import * as React from "react";
import { useRouter } from "next/router";
import {
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  renderPlasmicSlot,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import EarnOrLoss from "../../EarnOrLoss"; // plasmic-import: 1KaTQ9DhQg_b/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicGameRecords.module.css"; // plasmic-import: 2k4vr1-zQhkM/css

createPlasmicElementProxy;

export const PlasmicGameRecords__VariantProps = new Array("color", "status");

export const PlasmicGameRecords__ArgProps = new Array("children", "slot");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicGameRecords__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "color",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.color
      },
      {
        path: "status",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.status
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"rectangle4251"}
      data-plasmic-override={overrides.rectangle4251}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.rectangle4251,
        { [sty.rectangle4251color_light]: hasVariant($state, "color", "light") }
      )}
    >
      <div
        data-plasmic-name={"group44119"}
        data-plasmic-override={overrides.group44119}
        className={classNames(projectcss.all, sty.group44119, {
          [sty.group44119color_light]: hasVariant($state, "color", "light")
        })}
      >
        {renderPlasmicSlot({
          defaultContents: <Trans__>{"10230001"}</Trans__>,
          value: args.slot,
          className: classNames(sty.slotTargetSlot)
        })}
        {renderPlasmicSlot({
          defaultContents: <Trans__>{"2024/10/13 01:59"}</Trans__>,
          value: args.children,
          className: classNames(sty.slotTargetChildren)
        })}
        <div
          data-plasmic-name={"group44081"}
          data-plasmic-override={overrides.group44081}
          className={classNames(projectcss.all, sty.group44081)}
        >
          <EarnOrLoss
            data-plasmic-name={"earnOrLoss"}
            data-plasmic-override={overrides.earnOrLoss}
            className={classNames("__wab_instance", sty.earnOrLoss, {
              [sty.earnOrLosscolor_light]: hasVariant($state, "color", "light"),
              [sty.earnOrLossstatus_loss]: hasVariant($state, "status", "loss"),
              [sty.earnOrLossstatus_win]: hasVariant($state, "status", "win")
            })}
            status={
              hasVariant($state, "status", "loss")
                ? ["loss"]
                : hasVariant($state, "status", "win")
                ? ["win"]
                : hasVariant($state, "color", "light")
                ? ["loss"]
                : ["win"]
            }
          />
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  rectangle4251: ["rectangle4251", "group44119", "group44081", "earnOrLoss"],
  group44119: ["group44119", "group44081", "earnOrLoss"],
  group44081: ["group44081", "earnOrLoss"],
  earnOrLoss: ["earnOrLoss"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicGameRecords__ArgProps,
          internalVariantPropNames: PlasmicGameRecords__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicGameRecords__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "rectangle4251") {
    func.displayName = "PlasmicGameRecords";
  } else {
    func.displayName = `PlasmicGameRecords.${nodeName}`;
  }
  return func;
}

export const PlasmicGameRecords = Object.assign(
  // Top-level PlasmicGameRecords renders the root element
  makeNodeComponent("rectangle4251"),
  {
    // Helper components rendering sub-elements
    group44119: makeNodeComponent("group44119"),
    group44081: makeNodeComponent("group44081"),
    earnOrLoss: makeNodeComponent("earnOrLoss"),
    // Metadata about props expected for PlasmicGameRecords
    internalVariantProps: PlasmicGameRecords__VariantProps,
    internalArgProps: PlasmicGameRecords__ArgProps
  }
);

export default PlasmicGameRecords;
/* prettier-ignore-end */
