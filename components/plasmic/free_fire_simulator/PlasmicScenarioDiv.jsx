// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: UYEtztOS2wJV
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  useCurrentUser,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import ScenarioTitle from "../../ScenarioTitle"; // plasmic-import: jAxjuzQC8iMd/component
import ScenarioInfo from "../../ScenarioInfo"; // plasmic-import: _P5d0a1oi0bS/component
import ScenarioDetails from "../../ScenarioDetails"; // plasmic-import: 0VtJeBjEt0C7/component
import { useScreenVariants as useScreenVariants_2BvNreuf1Eto } from "./PlasmicGlobalVariant__DesktopBase"; // plasmic-import: 2BVNreuf1ETO/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicScenarioDiv.module.css"; // plasmic-import: UYEtztOS2wJV/css

createPlasmicElementProxy;

export const PlasmicScenarioDiv__VariantProps = new Array();

export const PlasmicScenarioDiv__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicScenarioDiv__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const globalVariants = ensureGlobalVariants({
    desktopBase: useScreenVariants_2BvNreuf1Eto()
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <ScenarioTitle
        data-plasmic-name={"scenarioTitle"}
        data-plasmic-override={overrides.scenarioTitle}
        className={classNames("__wab_instance", sty.scenarioTitle)}
      />

      <ScenarioInfo
        data-plasmic-name={"scenarioInfo"}
        data-plasmic-override={overrides.scenarioInfo}
        className={classNames("__wab_instance", sty.scenarioInfo)}
        differentScenario={
          hasVariant(globalVariants, "desktopBase", "desktopOnly")
            ? ["vehicle"]
            : undefined
        }
      />

      <ScenarioDetails
        data-plasmic-name={"scenarioDetails"}
        data-plasmic-override={overrides.scenarioDetails}
        className={classNames("__wab_instance", sty.scenarioDetails)}
        differentPics={
          hasVariant(globalVariants, "desktopBase", "desktopOnly")
            ? ["vehicle"]
            : ["airdrop"]
        }
      />
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "scenarioTitle", "scenarioInfo", "scenarioDetails"],
  scenarioTitle: ["scenarioTitle"],
  scenarioInfo: ["scenarioInfo"],
  scenarioDetails: ["scenarioDetails"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicScenarioDiv__ArgProps,
          internalVariantPropNames: PlasmicScenarioDiv__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicScenarioDiv__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicScenarioDiv";
  } else {
    func.displayName = `PlasmicScenarioDiv.${nodeName}`;
  }
  return func;
}

export const PlasmicScenarioDiv = Object.assign(
  // Top-level PlasmicScenarioDiv renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    scenarioTitle: makeNodeComponent("scenarioTitle"),
    scenarioInfo: makeNodeComponent("scenarioInfo"),
    scenarioDetails: makeNodeComponent("scenarioDetails"),
    // Metadata about props expected for PlasmicScenarioDiv
    internalVariantProps: PlasmicScenarioDiv__VariantProps,
    internalArgProps: PlasmicScenarioDiv__ArgProps
  }
);

export default PlasmicScenarioDiv;
/* prettier-ignore-end */
