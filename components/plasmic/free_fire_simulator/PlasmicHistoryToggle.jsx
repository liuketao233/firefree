// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ncwW2Qgif2pGwQDF81hXqa
// Component: dphjHJmbrlgm
import * as React from "react";
import { useRouter } from "next/router";
import {
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: ncwW2Qgif2pGwQDF81hXqa/projectcss
import sty from "./PlasmicHistoryToggle.module.css"; // plasmic-import: dphjHJmbrlgm/css

createPlasmicElementProxy;

export const PlasmicHistoryToggle__VariantProps = new Array("records");

export const PlasmicHistoryToggle__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHistoryToggle__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $translator = usePlasmicTranslator?.();
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "records",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.records
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"group44118"}
      data-plasmic-override={overrides.group44118}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.group44118
      )}
    >
      <div
        data-plasmic-name={"rectangle4249"}
        data-plasmic-override={overrides.rectangle4249}
        className={classNames(projectcss.all, sty.rectangle4249)}
      >
        <div
          className={classNames(projectcss.all, sty.freeBox__mkkpb, {
            [sty.freeBoxrecords_balance__mkkpbtdKtx]: hasVariant(
              $state,
              "records",
              "balance"
            )
          })}
        >
          <div
            data-plasmic-name={"rectangle4250"}
            data-plasmic-override={overrides.rectangle4250}
            className={classNames(projectcss.all, sty.rectangle4250, {
              [sty.rectangle4250records_balance]: hasVariant(
                $state,
                "records",
                "balance"
              )
            })}
          />
        </div>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__tpGfC, {
          [sty.freeBoxrecords_balance__tpGfCtdKtx]: hasVariant(
            $state,
            "records",
            "balance"
          )
        })}
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__jVmYc,
            {
              [sty.textrecords_balance__jVmYctdKtx]: hasVariant(
                $state,
                "records",
                "balance"
              )
            }
          )}
        >
          <Trans__>{"\u6e38\u620f\u8bb0\u5f55"}</Trans__>
        </div>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__oG6Be,
            {
              [sty.textrecords_balance__oG6BEtdKtx]: hasVariant(
                $state,
                "records",
                "balance"
              )
            }
          )}
        >
          <Trans__>{"\u4f59\u989d\u53d8\u52a8"}</Trans__>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  group44118: ["group44118", "rectangle4249", "rectangle4250"],
  rectangle4249: ["rectangle4249", "rectangle4250"],
  rectangle4250: ["rectangle4250"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHistoryToggle__ArgProps,
          internalVariantPropNames: PlasmicHistoryToggle__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHistoryToggle__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "group44118") {
    func.displayName = "PlasmicHistoryToggle";
  } else {
    func.displayName = `PlasmicHistoryToggle.${nodeName}`;
  }
  return func;
}

export const PlasmicHistoryToggle = Object.assign(
  // Top-level PlasmicHistoryToggle renders the root element
  makeNodeComponent("group44118"),
  {
    // Helper components rendering sub-elements
    rectangle4249: makeNodeComponent("rectangle4249"),
    rectangle4250: makeNodeComponent("rectangle4250"),
    // Metadata about props expected for PlasmicHistoryToggle
    internalVariantProps: PlasmicHistoryToggle__VariantProps,
    internalArgProps: PlasmicHistoryToggle__ArgProps
  }
);

export default PlasmicHistoryToggle;
/* prettier-ignore-end */
